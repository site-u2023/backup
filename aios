#!/bin/sh
# License: CC0
# OpenWrt >= 19.07

AIOS_VERSION="2025.02.05-rc1"
echo "aios Last update: $AIOS_VERSION"

# === 定数の設定 ===
BASE_URL="https://raw.githubusercontent.com/site-u2023/aios/main"
BASE_DIR="/tmp/aios"
SUPPORTED_LANGUAGES="en ja zh-cn zh-tw id ko de ru"
INPUT_LANG="$1"

#########################################################################
# handle_error: 汎用エラーハンドリング関数
#########################################################################
handle_error() {
    color red "$(get_message 'MSG_ERROR_OCCURRED'): $1"
    exit 1
}

#########################################################################
# get_message: 多言語対応メッセージ取得関数
#########################################################################
get_message() {
    local key="$1"
    local lang="${SELECTED_LANGUAGE:-en}"  # デフォルトは英語

    # メッセージDBから対応メッセージを取得
    local message=$(grep "^${lang}|${key}=" "${BASE_DIR}/messages.db" | cut -d'=' -f2-)

    # 見つからない場合、英語のデフォルトメッセージを使用
    if [ -z "$message" ]; then
        message=$(grep "^en|${key}=" "${BASE_DIR}/messages.db" | cut -d'=' -f2-)
    fi

    # 見つからない場合はキーそのものを返す
    [ -z "$message" ] && echo "$key" || echo "$message"
}

#########################################################################
# ファイルダウンロード関数
#########################################################################
download_file() {
    local remote_file="$1"
    local destination="$2"
    color cyan "$(get_message 'MSG_DOWNLOAD_START'): $remote_file"
    wget --quiet -O "$destination" "${BASE_URL}/${remote_file}" || handle_error "$(get_message 'MSG_DOWNLOAD_FAIL'): $remote_file"
    color green "$(get_message 'MSG_DOWNLOAD_SUCCESS'): $remote_file"
}

#########################################################################
# キャッシュされたファイルの存在確認と更新
#########################################################################
ensure_file() {
    local file_name="$1"
    local file_path="${BASE_DIR}/${file_name}"

    if [ ! -f "$file_path" ]; then
        download_file "$file_name" "$file_path"
    fi
}

#########################################################################
# バージョン互換性チェック
#########################################################################
check_version_compatibility() {
    REQUIRED_VERSION="2025.02.0"

    # common-functions.sh のバージョンチェック
    COMMON_FUNCTIONS_VERSION=$(grep "^COMMON_FUNCTIONS_VERSION=" "${BASE_DIR}/common-functions.sh" | cut -d'=' -f2 | tr -d '"')
    if [ "$COMMON_FUNCTIONS_VERSION" != "$REQUIRED_VERSION" ]; then
        handle_error "$(get_message 'MSG_VERSION_UNSUPPORTED'): common-functions.sh ($COMMON_FUNCTIONS_VERSION). Required: $REQUIRED_VERSION"
    fi

    # messages.db のバージョンチェック
    MESSAGES_DB_VERSION=$(grep "^version=" "${BASE_DIR}/messages.db" | cut -d'=' -f2)
    if [ "$MESSAGES_DB_VERSION" != "$REQUIRED_VERSION" ]; then
        handle_error "$(get_message 'MSG_VERSION_UNSUPPORTED'): messages.db ($MESSAGES_DB_VERSION). Required: $REQUIRED_VERSION"
    fi
}

#########################################################################
# 言語設定の確認
#########################################################################
setup_language() {
    if [ -n "$INPUT_LANG" ] && echo "$SUPPORTED_LANGUAGES" | grep -qw "$INPUT_LANG"; then
        SELECTED_LANGUAGE="$INPUT_LANG"
        echo "$SELECTED_LANGUAGE" > "${BASE_DIR}/language_cache"
    elif [ -f "${BASE_DIR}/language_cache" ]; then
        SELECTED_LANGUAGE=$(cat "${BASE_DIR}/language_cache")
    else
        color yellow "$(get_message 'MSG_SELECT_LANGUAGE')"
        index=1
        for lang in $SUPPORTED_LANGUAGES; do
            echo "$index) $lang"
            index=$((index + 1))
        done
        read -p "Enter number or language (e.g., en, ja): " lang_choice
        SELECTED_LANGUAGE=$(echo $SUPPORTED_LANGUAGES | awk -v num="$lang_choice" '{print $num}')
        echo "$SELECTED_LANGUAGE" > "${BASE_DIR}/language_cache"
    fi
}

#########################################################################
# バナー表示
#########################################################################
print_banner() {
    local banner_msg
    banner_msg=$(get_message 'MSG_BANNER' "$SELECTED_LANGUAGE")
    echo -e "\033[1;36m${banner_msg}\033[0m"
}

#########################################################################
# OpenWrt 設定スクリプトの実行
#########################################################################
execute_openwrt_config() {
    ensure_file "openwrt-config.sh"
    sh "${BASE_DIR}/openwrt-config.sh" || handle_error "$(get_message 'MSG_EXECUTE_AIOS_FAIL')"
}

#########################################################################
# --version オプション処理
#########################################################################
if [ "$1" = "--version" ]; then
    echo "AIOS Version: $AIOS_VERSION"
    if [ -f "${BASE_DIR}/common-functions.sh" ]; then
        COMMON_FUNCTIONS_VERSION=$(grep "^COMMON_FUNCTIONS_VERSION=" "${BASE_DIR}/common-functions.sh" | cut -d'=' -f2 | tr -d '"')
        echo "Common Functions Version: $COMMON_FUNCTIONS_VERSION"
    else
        echo "Common Functions Version: Not downloaded"
    fi
    exit 0
fi

#########################################################################
# メイン処理
#########################################################################
mkdir -p "$BASE_DIR"

# 必要なファイルの確保
ensure_file "common-functions.sh"
ensure_file "messages.db"

# 互換性チェック
check_version_compatibility

# 共通関数の読み込み
. "${BASE_DIR}/common-functions.sh" || handle_error "Failed to load common-functions.sh"

# 言語設定、バナー表示、設定スクリプト実行
setup_language
print_banner
execute_openwrt_config
